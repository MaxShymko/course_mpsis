
Course.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  00000a4e  00000ae2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008001b2  008001b2  00000b94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000167c  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000985  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad1  00000000  00000000  00002ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000037a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000574  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000115a  00000000  00000000  00003ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000514a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3b       	cpi	r26, 0xB2	; 178
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 eb       	ldi	r26, 0xB2	; 178
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3c       	cpi	r26, 0xC6	; 198
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 55 03 	call	0x6aa	; 0x6aa <main>
  9e:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initRooms>:
	rooms[room].motionSensor.lock = lock;
}

uint8_t isRoomLocked(uint8_t room) {
	return rooms[room].door.lock;
}
  a6:	e2 eb       	ldi	r30, 0xB2	; 178
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	80 81       	ld	r24, Z
  ac:	81 70       	andi	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24
  b0:	a3 eb       	ldi	r26, 0xB3	; 179
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	8c 91       	ld	r24, X
  b6:	81 70       	andi	r24, 0x01	; 1
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	8c 93       	st	X, r24
  bc:	a4 eb       	ldi	r26, 0xB4	; 180
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	8c 91       	ld	r24, X
  c2:	81 70       	andi	r24, 0x01	; 1
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	8c 93       	st	X, r24
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	94 83       	std	Z+4, r25	; 0x04
  ce:	83 83       	std	Z+3, r24	; 0x03
  d0:	a7 eb       	ldi	r26, 0xB7	; 183
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	8c 91       	ld	r24, X
  d6:	81 70       	andi	r24, 0x01	; 1
  d8:	80 66       	ori	r24, 0x60	; 96
  da:	8c 93       	st	X, r24
  dc:	a8 eb       	ldi	r26, 0xB8	; 184
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	8c 91       	ld	r24, X
  e2:	81 70       	andi	r24, 0x01	; 1
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8c 93       	st	X, r24
  e8:	a9 eb       	ldi	r26, 0xB9	; 185
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	8c 91       	ld	r24, X
  ee:	81 70       	andi	r24, 0x01	; 1
  f0:	80 6a       	ori	r24, 0xA0	; 160
  f2:	8c 93       	st	X, r24
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	91 87       	std	Z+9, r25	; 0x09
  fa:	80 87       	std	Z+8, r24	; 0x08
  fc:	ac eb       	ldi	r26, 0xBC	; 188
  fe:	b1 e0       	ldi	r27, 0x01	; 1
 100:	8c 91       	ld	r24, X
 102:	81 70       	andi	r24, 0x01	; 1
 104:	80 6c       	ori	r24, 0xC0	; 192
 106:	8c 93       	st	X, r24
 108:	ad eb       	ldi	r26, 0xBD	; 189
 10a:	b1 e0       	ldi	r27, 0x01	; 1
 10c:	8c 91       	ld	r24, X
 10e:	81 7e       	andi	r24, 0xE1	; 225
 110:	80 6e       	ori	r24, 0xE0	; 224
 112:	8c 93       	st	X, r24
 114:	ae eb       	ldi	r26, 0xBE	; 190
 116:	b1 e0       	ldi	r27, 0x01	; 1
 118:	8c 91       	ld	r24, X
 11a:	81 70       	andi	r24, 0x01	; 1
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	8c 93       	st	X, r24
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	96 87       	std	Z+14, r25	; 0x0e
 126:	85 87       	std	Z+13, r24	; 0x0d
 128:	a1 ec       	ldi	r26, 0xC1	; 193
 12a:	b1 e0       	ldi	r27, 0x01	; 1
 12c:	8c 91       	ld	r24, X
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	82 60       	ori	r24, 0x02	; 2
 132:	80 62       	ori	r24, 0x20	; 32
 134:	8c 93       	st	X, r24
 136:	a2 ec       	ldi	r26, 0xC2	; 194
 138:	b1 e0       	ldi	r27, 0x01	; 1
 13a:	8c 91       	ld	r24, X
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	80 64       	ori	r24, 0x40	; 64
 142:	8c 93       	st	X, r24
 144:	a3 ec       	ldi	r26, 0xC3	; 195
 146:	b1 e0       	ldi	r27, 0x01	; 1
 148:	8c 91       	ld	r24, X
 14a:	81 70       	andi	r24, 0x01	; 1
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	80 66       	ori	r24, 0x60	; 96
 150:	8c 93       	st	X, r24
 152:	8f e0       	ldi	r24, 0x0F	; 15
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	93 8b       	std	Z+19, r25	; 0x13
 158:	82 8b       	std	Z+18, r24	; 0x12
 15a:	08 95       	ret

0000015c <cmpString>:
 15c:	44 23       	and	r20, r20
 15e:	d1 f0       	breq	.+52     	; 0x194 <cmpString+0x38>
 160:	fc 01       	movw	r30, r24
 162:	30 81       	ld	r19, Z
 164:	fb 01       	movw	r30, r22
 166:	20 81       	ld	r18, Z
 168:	32 13       	cpse	r19, r18
 16a:	16 c0       	rjmp	.+44     	; 0x198 <cmpString+0x3c>
 16c:	fc 01       	movw	r30, r24
 16e:	31 96       	adiw	r30, 0x01	; 1
 170:	db 01       	movw	r26, r22
 172:	11 96       	adiw	r26, 0x01	; 1
 174:	41 50       	subi	r20, 0x01	; 1
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	4f 5f       	subi	r20, 0xFF	; 255
 17a:	5f 4f       	sbci	r21, 0xFF	; 255
 17c:	48 0f       	add	r20, r24
 17e:	59 1f       	adc	r21, r25
 180:	04 c0       	rjmp	.+8      	; 0x18a <cmpString+0x2e>
 182:	21 91       	ld	r18, Z+
 184:	9d 91       	ld	r25, X+
 186:	29 13       	cpse	r18, r25
 188:	09 c0       	rjmp	.+18     	; 0x19c <cmpString+0x40>
 18a:	e4 17       	cp	r30, r20
 18c:	f5 07       	cpc	r31, r21
 18e:	c9 f7       	brne	.-14     	; 0x182 <cmpString+0x26>
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	08 95       	ret
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	08 95       	ret
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	08 95       	ret
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret

000001a0 <portSetup>:
 1a0:	84 b1       	in	r24, 0x04	; 4
 1a2:	87 60       	ori	r24, 0x07	; 7
 1a4:	84 b9       	out	0x04, r24	; 4
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	88 7f       	andi	r24, 0xF8	; 248
 1aa:	85 b9       	out	0x05, r24	; 5
 1ac:	23 98       	cbi	0x04, 3	; 4
 1ae:	24 98       	cbi	0x04, 4	; 4
 1b0:	87 b1       	in	r24, 0x07	; 7
 1b2:	8f 63       	ori	r24, 0x3F	; 63
 1b4:	87 b9       	out	0x07, r24	; 7
 1b6:	18 b8       	out	0x08, r1	; 8
 1b8:	8a b1       	in	r24, 0x0a	; 10
 1ba:	80 67       	ori	r24, 0x70	; 112
 1bc:	8a b9       	out	0x0a, r24	; 10
 1be:	8a b1       	in	r24, 0x0a	; 10
 1c0:	80 7f       	andi	r24, 0xF0	; 240
 1c2:	8a b9       	out	0x0a, r24	; 10
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	8f 67       	ori	r24, 0x7F	; 127
 1c8:	8b b9       	out	0x0b, r24	; 11
 1ca:	08 95       	ret

000001cc <timerSetup>:
 1cc:	ee e6       	ldi	r30, 0x6E	; 110
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	80 83       	st	Z, r24
 1d6:	85 b5       	in	r24, 0x25	; 37
 1d8:	84 60       	ori	r24, 0x04	; 4
 1da:	85 bd       	out	0x25, r24	; 37
 1dc:	08 95       	ret

000001de <setMuxAdr>:
	
	return result;
}

void setMuxAdr(uint8_t adr) {
	if (adr & 0b001) ADR_PORT |= (1 << ADR(0));
 1de:	80 ff       	sbrs	r24, 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <setMuxAdr+0x8>
 1e2:	28 9a       	sbi	0x05, 0	; 5
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <setMuxAdr+0xa>
	else ADR_PORT &= ~(1 << ADR(0));
 1e6:	28 98       	cbi	0x05, 0	; 5
	if (adr & 0b010) ADR_PORT |= (1 << ADR(1));
 1e8:	81 ff       	sbrs	r24, 1
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <setMuxAdr+0x12>
 1ec:	29 9a       	sbi	0x05, 1	; 5
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <setMuxAdr+0x14>
	else ADR_PORT &= ~(1 << ADR(1));
 1f0:	29 98       	cbi	0x05, 1	; 5
	if (adr & 0b100) ADR_PORT |= (1 << ADR(2));
 1f2:	82 ff       	sbrs	r24, 2
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <setMuxAdr+0x1c>
 1f6:	2a 9a       	sbi	0x05, 2	; 5
 1f8:	08 95       	ret
	else ADR_PORT &= ~(1 << ADR(2));
 1fa:	2a 98       	cbi	0x05, 2	; 5
 1fc:	08 95       	ret

000001fe <checkRoom>:

uint8_t isRoomLocked(uint8_t room) {
	return rooms[room].door.lock;
}

uint8_t checkRoom(uint8_t num) {
 1fe:	ef 92       	push	r14
 200:	ff 92       	push	r15
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
	uint8_t result = 0;
	
	setMuxAdr(rooms[num].door.pin);
 20a:	c8 2f       	mov	r28, r24
 20c:	d0 e0       	ldi	r29, 0x00	; 0
 20e:	7e 01       	movw	r14, r28
 210:	ee 0c       	add	r14, r14
 212:	ff 1c       	adc	r15, r15
 214:	ee 0c       	add	r14, r14
 216:	ff 1c       	adc	r15, r15
 218:	ec 0e       	add	r14, r28
 21a:	fd 1e       	adc	r15, r29
 21c:	87 01       	movw	r16, r14
 21e:	0e 54       	subi	r16, 0x4E	; 78
 220:	1e 4f       	sbci	r17, 0xFE	; 254
 222:	f8 01       	movw	r30, r16
 224:	80 81       	ld	r24, Z
 226:	82 95       	swap	r24
 228:	86 95       	lsr	r24
 22a:	87 70       	andi	r24, 0x07	; 7
 22c:	0e 94 ef 00 	call	0x1de	; 0x1de <setMuxAdr>
	if ((SENSOR_GROUP_PIN & (1 << SENSOR_GROUP(rooms[num].door.group))) == 0)
 230:	83 b1       	in	r24, 0x03	; 3
uint8_t isRoomLocked(uint8_t room) {
	return rooms[room].door.lock;
}

uint8_t checkRoom(uint8_t num) {
	uint8_t result = 0;
 232:	90 e0       	ldi	r25, 0x00	; 0
	
	setMuxAdr(rooms[num].door.pin);
	if ((SENSOR_GROUP_PIN & (1 << SENSOR_GROUP(rooms[num].door.group))) == 0)
 234:	f8 01       	movw	r30, r16
 236:	20 81       	ld	r18, Z
 238:	26 95       	lsr	r18
 23a:	2f 70       	andi	r18, 0x0F	; 15
uint8_t isRoomLocked(uint8_t room) {
	return rooms[room].door.lock;
}

uint8_t checkRoom(uint8_t num) {
	uint8_t result = 0;
 23c:	2d 5f       	subi	r18, 0xFD	; 253
 23e:	02 c0       	rjmp	.+4      	; 0x244 <checkRoom+0x46>
 240:	95 95       	asr	r25
 242:	87 95       	ror	r24
 244:	2a 95       	dec	r18
 246:	e2 f7       	brpl	.-8      	; 0x240 <checkRoom+0x42>
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	8f 27       	eor	r24, r31
 24c:	18 2f       	mov	r17, r24
 24e:	11 70       	andi	r17, 0x01	; 1
	
	setMuxAdr(rooms[num].door.pin);
	if ((SENSOR_GROUP_PIN & (1 << SENSOR_GROUP(rooms[num].door.group))) == 0)
		result |= 1;
	
	setMuxAdr(rooms[num].window.pin);
 250:	a7 01       	movw	r20, r14
 252:	4d 54       	subi	r20, 0x4D	; 77
 254:	5e 4f       	sbci	r21, 0xFE	; 254
 256:	7a 01       	movw	r14, r20
 258:	fa 01       	movw	r30, r20
 25a:	80 81       	ld	r24, Z
 25c:	82 95       	swap	r24
 25e:	86 95       	lsr	r24
 260:	87 70       	andi	r24, 0x07	; 7
 262:	0e 94 ef 00 	call	0x1de	; 0x1de <setMuxAdr>
	if ((SENSOR_GROUP_PIN & (1 << SENSOR_GROUP(rooms[num].window.group))) == 0)
 266:	83 b1       	in	r24, 0x03	; 3
 268:	28 2f       	mov	r18, r24
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	f7 01       	movw	r30, r14
 26e:	90 81       	ld	r25, Z
 270:	96 95       	lsr	r25
 272:	9f 70       	andi	r25, 0x0F	; 15
 274:	9d 5f       	subi	r25, 0xFD	; 253
 276:	a9 01       	movw	r20, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <checkRoom+0x80>
 27a:	55 95       	asr	r21
 27c:	47 95       	ror	r20
 27e:	9a 95       	dec	r25
 280:	e2 f7       	brpl	.-8      	; 0x27a <checkRoom+0x7c>
 282:	40 ff       	sbrs	r20, 0
		result |= 2;
 284:	12 60       	ori	r17, 0x02	; 2
		
	setMuxAdr(rooms[num].motionSensor.pin);
 286:	ce 01       	movw	r24, r28
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	c8 0f       	add	r28, r24
 292:	d9 1f       	adc	r29, r25
 294:	cc 54       	subi	r28, 0x4C	; 76
 296:	de 4f       	sbci	r29, 0xFE	; 254
 298:	88 81       	ld	r24, Y
 29a:	82 95       	swap	r24
 29c:	86 95       	lsr	r24
 29e:	87 70       	andi	r24, 0x07	; 7
 2a0:	0e 94 ef 00 	call	0x1de	; 0x1de <setMuxAdr>
	if ((SENSOR_GROUP_PIN & (1 << SENSOR_GROUP(rooms[num].motionSensor.group))) != 0)
 2a4:	83 b1       	in	r24, 0x03	; 3
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	88 81       	ld	r24, Y
 2ac:	86 95       	lsr	r24
 2ae:	8f 70       	andi	r24, 0x0F	; 15
 2b0:	8d 5f       	subi	r24, 0xFD	; 253
 2b2:	f9 01       	movw	r30, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <checkRoom+0xbc>
 2b6:	f5 95       	asr	r31
 2b8:	e7 95       	ror	r30
 2ba:	8a 95       	dec	r24
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <checkRoom+0xb8>
 2be:	e0 fd       	sbrc	r30, 0
		result |= 4;
 2c0:	14 60       	ori	r17, 0x04	; 4
	
	return result;
}
 2c2:	81 2f       	mov	r24, r17
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	08 95       	ret

000002d2 <LCD_setHalfByte>:
	LCD_setHalfByte(byte, part);
	LCD_PORT &= ~(1 << LCD_E);
	_delay_us(100);
}

void LCD_setHalfByte(uint8_t byte, uint8_t part) {
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	66 0f       	add	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	66 0f       	add	r22, r22
 2de:	77 1f       	adc	r23, r23
	for (uint8_t i = 0; i < 4; i++) {
		if (byte & (1 << (i + part*4))) LCD_PORT |= (1 << LCD_D(i + 4));
 2e0:	22 e0       	ldi	r18, 0x02	; 2
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	a8 2f       	mov	r26, r24
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
		else LCD_PORT &= ~(1 << LCD_D(i + 4));
 2e8:	c1 e0       	ldi	r28, 0x01	; 1
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_us(100);
}

void LCD_setHalfByte(uint8_t byte, uint8_t part) {
	for (uint8_t i = 0; i < 4; i++) {
		if (byte & (1 << (i + part*4))) LCD_PORT |= (1 << LCD_D(i + 4));
 2ec:	ad 01       	movw	r20, r26
 2ee:	06 2e       	mov	r0, r22
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <LCD_setHalfByte+0x24>
 2f2:	55 95       	asr	r21
 2f4:	47 95       	ror	r20
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <LCD_setHalfByte+0x20>
 2fa:	40 ff       	sbrs	r20, 0
 2fc:	0b c0       	rjmp	.+22     	; 0x314 <LCD_setHalfByte+0x42>
 2fe:	88 b1       	in	r24, 0x08	; 8
 300:	ae 01       	movw	r20, r28
 302:	02 2e       	mov	r0, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <LCD_setHalfByte+0x38>
 306:	44 0f       	add	r20, r20
 308:	55 1f       	adc	r21, r21
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <LCD_setHalfByte+0x34>
 30e:	48 2b       	or	r20, r24
 310:	48 b9       	out	0x08, r20	; 8
 312:	0c c0       	rjmp	.+24     	; 0x32c <LCD_setHalfByte+0x5a>
		else LCD_PORT &= ~(1 << LCD_D(i + 4));
 314:	48 b1       	in	r20, 0x08	; 8
 316:	fe 01       	movw	r30, r28
 318:	02 2e       	mov	r0, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <LCD_setHalfByte+0x4e>
 31c:	ee 0f       	add	r30, r30
 31e:	ff 1f       	adc	r31, r31
 320:	0a 94       	dec	r0
 322:	e2 f7       	brpl	.-8      	; 0x31c <LCD_setHalfByte+0x4a>
 324:	9e 2f       	mov	r25, r30
 326:	90 95       	com	r25
 328:	94 23       	and	r25, r20
 32a:	98 b9       	out	0x08, r25	; 8
 32c:	6f 5f       	subi	r22, 0xFF	; 255
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	2f 5f       	subi	r18, 0xFF	; 255
 332:	3f 4f       	sbci	r19, 0xFF	; 255
	LCD_PORT &= ~(1 << LCD_E);
	_delay_us(100);
}

void LCD_setHalfByte(uint8_t byte, uint8_t part) {
	for (uint8_t i = 0; i < 4; i++) {
 334:	26 30       	cpi	r18, 0x06	; 6
 336:	31 05       	cpc	r19, r1
 338:	c9 f6       	brne	.-78     	; 0x2ec <LCD_setHalfByte+0x1a>
		if (byte & (1 << (i + part*4))) LCD_PORT |= (1 << LCD_D(i + 4));
		else LCD_PORT &= ~(1 << LCD_D(i + 4));
	}
}
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <LCD_sendHalfByte>:
	LCD_sendHalfByte(command, LCD_BYTE_HIGH);
	LCD_sendHalfByte(command, LCD_BYTE_LOW);
}

void LCD_sendHalfByte(uint8_t byte, uint8_t part) {
	LCD_PORT |= (1 << LCD_E);
 340:	41 9a       	sbi	0x08, 1	; 8
	LCD_setHalfByte(byte, part);
 342:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LCD_setHalfByte>
	LCD_PORT &= ~(1 << LCD_E);
 346:	41 98       	cbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 348:	81 e2       	ldi	r24, 0x21	; 33
 34a:	8a 95       	dec	r24
 34c:	f1 f7       	brne	.-4      	; 0x34a <LCD_sendHalfByte+0xa>
 34e:	00 00       	nop
 350:	08 95       	ret

00000352 <LCD_sendCommand>:
	LCD_PORT |= (1 << LCD_RS);
	LCD_sendCommand(data);
	LCD_PORT &= ~(1 << LCD_RS);
}

void LCD_sendCommand(uint8_t command) {
 352:	cf 93       	push	r28
 354:	c8 2f       	mov	r28, r24
	LCD_sendHalfByte(command, LCD_BYTE_HIGH);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_sendHalfByte>
	LCD_sendHalfByte(command, LCD_BYTE_LOW);
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	8c 2f       	mov	r24, r28
 360:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_sendHalfByte>
}
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <LCD_clear>:
	
	LCD_showMenu();
}

void LCD_clear() {
	LCD_sendCommand(0b00000001);
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36e:	8b e7       	ldi	r24, 0x7B	; 123
 370:	92 e9       	ldi	r25, 0x92	; 146
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <LCD_clear+0xa>
 376:	00 c0       	rjmp	.+0      	; 0x378 <LCD_clear+0x10>
 378:	00 00       	nop
 37a:	08 95       	ret

0000037c <LCD_sendData>:
		LCD_sendData(str[i]);
	}
}

void LCD_sendData(uint8_t data) {
	LCD_PORT |= (1 << LCD_RS);
 37c:	40 9a       	sbi	0x08, 0	; 8
	LCD_sendCommand(data);
 37e:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCommand>
	LCD_PORT &= ~(1 << LCD_RS);
 382:	40 98       	cbi	0x08, 0	; 8
 384:	08 95       	ret

00000386 <LCD_sendString>:
		string[4] = '0' + i + 1;
		LCD_sendString(string, 20, i, 0);
	}
}

void LCD_sendString(char* str, uint8_t len, uint8_t line, uint8_t pos) {
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	7c 01       	movw	r14, r24
 394:	16 2f       	mov	r17, r22
	switch (line) {
 396:	42 30       	cpi	r20, 0x02	; 2
 398:	31 f0       	breq	.+12     	; 0x3a6 <LCD_sendString+0x20>
 39a:	43 30       	cpi	r20, 0x03	; 3
 39c:	31 f0       	breq	.+12     	; 0x3aa <LCD_sendString+0x24>
 39e:	41 30       	cpi	r20, 0x01	; 1
 3a0:	29 f4       	brne	.+10     	; 0x3ac <LCD_sendString+0x26>
		case 0: pos += 0x00;break;
		case 1: pos += 0x40;break;
 3a2:	20 5c       	subi	r18, 0xC0	; 192
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <LCD_sendString+0x26>
		case 2: pos += 0x14;break;
 3a6:	2c 5e       	subi	r18, 0xEC	; 236
 3a8:	01 c0       	rjmp	.+2      	; 0x3ac <LCD_sendString+0x26>
		case 3: pos += 0x54;break;
 3aa:	2c 5a       	subi	r18, 0xAC	; 172
	}
	LCD_sendCommand(0x80 | pos);
 3ac:	82 2f       	mov	r24, r18
 3ae:	80 68       	ori	r24, 0x80	; 128
 3b0:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCommand>
	for (uint8_t i = 0; i < len; i++) {
 3b4:	11 23       	and	r17, r17
 3b6:	71 f0       	breq	.+28     	; 0x3d4 <LCD_sendString+0x4e>
 3b8:	e7 01       	movw	r28, r14
 3ba:	11 50       	subi	r17, 0x01	; 1
 3bc:	01 2f       	mov	r16, r17
 3be:	10 e0       	ldi	r17, 0x00	; 0
 3c0:	0f 5f       	subi	r16, 0xFF	; 255
 3c2:	1f 4f       	sbci	r17, 0xFF	; 255
 3c4:	0e 0d       	add	r16, r14
 3c6:	1f 1d       	adc	r17, r15
		LCD_sendData(str[i]);
 3c8:	89 91       	ld	r24, Y+
 3ca:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendData>
		case 1: pos += 0x40;break;
		case 2: pos += 0x14;break;
		case 3: pos += 0x54;break;
	}
	LCD_sendCommand(0x80 | pos);
	for (uint8_t i = 0; i < len; i++) {
 3ce:	c0 17       	cp	r28, r16
 3d0:	d1 07       	cpc	r29, r17
 3d2:	d1 f7       	brne	.-12     	; 0x3c8 <LCD_sendString+0x42>
		LCD_sendData(str[i]);
	}
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	08 95       	ret

000003e2 <LCD_showMenu>:
void LCD_clear() {
	LCD_sendCommand(0b00000001);
	_delay_ms(150);
}

void LCD_showMenu() {
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
	char* string = "-RM:-, D:-, W:-, M:-";
	for (uint8_t i = 0; i < ROOMS_COUNT; i++) {
 3e8:	c0 e0       	ldi	r28, 0x00	; 0
		string[4] = '0' + i + 1;
 3ea:	04 e1       	ldi	r16, 0x14	; 20
 3ec:	11 e0       	ldi	r17, 0x01	; 1
 3ee:	81 e3       	ldi	r24, 0x31	; 49
 3f0:	8c 0f       	add	r24, r28
 3f2:	f8 01       	movw	r30, r16
 3f4:	84 83       	std	Z+4, r24	; 0x04
		LCD_sendString(string, 20, i, 0);
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	4c 2f       	mov	r20, r28
 3fa:	64 e1       	ldi	r22, 0x14	; 20
 3fc:	c8 01       	movw	r24, r16
 3fe:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
	_delay_ms(150);
}

void LCD_showMenu() {
	char* string = "-RM:-, D:-, W:-, M:-";
	for (uint8_t i = 0; i < ROOMS_COUNT; i++) {
 402:	cf 5f       	subi	r28, 0xFF	; 255
 404:	c4 30       	cpi	r28, 0x04	; 4
 406:	99 f7       	brne	.-26     	; 0x3ee <LCD_showMenu+0xc>
		string[4] = '0' + i + 1;
		LCD_sendString(string, 20, i, 0);
	}
}
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	08 95       	ret

00000410 <LCD_createChar>:
		if (byte & (1 << (i + part*4))) LCD_PORT |= (1 << LCD_D(i + 4));
		else LCD_PORT &= ~(1 << LCD_D(i + 4));
	}
}

void LCD_createChar(uint8_t num, const uint8_t ms[]) {
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	8b 01       	movw	r16, r22
	uint8_t adr = num * 8;
	LCD_sendCommand(0x40 | adr);
 41a:	88 0f       	add	r24, r24
 41c:	88 0f       	add	r24, r24
 41e:	88 0f       	add	r24, r24
 420:	80 64       	ori	r24, 0x40	; 64
 422:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCommand>
 426:	e8 01       	movw	r28, r16
 428:	08 5f       	subi	r16, 0xF8	; 248
 42a:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i < 8; i++, adr++) {
		LCD_sendData(ms[i]);
 42c:	89 91       	ld	r24, Y+
 42e:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendData>
}

void LCD_createChar(uint8_t num, const uint8_t ms[]) {
	uint8_t adr = num * 8;
	LCD_sendCommand(0x40 | adr);
	for (uint8_t i = 0; i < 8; i++, adr++) {
 432:	c0 17       	cp	r28, r16
 434:	d1 07       	cpc	r29, r17
 436:	d1 f7       	brne	.-12     	; 0x42c <LCD_createChar+0x1c>
		LCD_sendData(ms[i]);
	}
}
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	08 95       	ret

00000442 <LCD_init>:
 442:	87 ea       	ldi	r24, 0xA7	; 167
 444:	91 e6       	ldi	r25, 0x61	; 97
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <LCD_init+0x4>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <LCD_init+0xa>
 44c:	00 00       	nop
	}
}

void LCD_init() {
	_delay_ms(100);
	LCD_sendHalfByte(0b0011, LCD_BYTE_LOW);
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_sendHalfByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 456:	91 e2       	ldi	r25, 0x21	; 33
 458:	9a 95       	dec	r25
 45a:	f1 f7       	brne	.-4      	; 0x458 <LCD_init+0x16>
 45c:	00 00       	nop
	_delay_us(100);
	LCD_sendHalfByte(0b0011, LCD_BYTE_LOW);
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_sendHalfByte>
 466:	81 e2       	ldi	r24, 0x21	; 33
 468:	8a 95       	dec	r24
 46a:	f1 f7       	brne	.-4      	; 0x468 <LCD_init+0x26>
 46c:	00 00       	nop
	_delay_us(100);
	LCD_sendHalfByte(0b0011, LCD_BYTE_LOW);
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	83 e0       	ldi	r24, 0x03	; 3
 472:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_sendHalfByte>
 476:	91 e2       	ldi	r25, 0x21	; 33
 478:	9a 95       	dec	r25
 47a:	f1 f7       	brne	.-4      	; 0x478 <LCD_init+0x36>
 47c:	00 00       	nop
	_delay_us(100);
	LCD_sendHalfByte(0b0010, LCD_BYTE_LOW);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_sendHalfByte>
 486:	81 e2       	ldi	r24, 0x21	; 33
 488:	8a 95       	dec	r24
 48a:	f1 f7       	brne	.-4      	; 0x488 <LCD_init+0x46>
 48c:	00 00       	nop
	_delay_us(100);
	
	LCD_sendCommand(0b00101000);
 48e:	88 e2       	ldi	r24, 0x28	; 40
 490:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCommand>
	LCD_sendCommand(0b00001000);
 494:	88 e0       	ldi	r24, 0x08	; 8
 496:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCommand>
	LCD_sendCommand(0b00000001);
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a0:	8b e7       	ldi	r24, 0x7B	; 123
 4a2:	92 e9       	ldi	r25, 0x92	; 146
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <LCD_init+0x62>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <LCD_init+0x68>
 4aa:	00 00       	nop
	_delay_ms(150);
	LCD_sendCommand(0b00000110);
 4ac:	86 e0       	ldi	r24, 0x06	; 6
 4ae:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCommand>
	
	LCD_sendCommand(0b00001100); // cursor
 4b2:	8c e0       	ldi	r24, 0x0C	; 12
 4b4:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCommand>
	
	LCD_createChar(LCD_CHAR_LOCK, lockChar);
 4b8:	6a ea       	ldi	r22, 0xAA	; 170
 4ba:	71 e0       	ldi	r23, 0x01	; 1
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 08 02 	call	0x410	; 0x410 <LCD_createChar>
	LCD_createChar(LCD_CHAR_UNLOCK, unlockChar);
 4c2:	62 ea       	ldi	r22, 0xA2	; 162
 4c4:	71 e0       	ldi	r23, 0x01	; 1
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 08 02 	call	0x410	; 0x410 <LCD_createChar>
	LCD_createChar(LCD_CHAR_ACCIDENT, accidentChar);
 4cc:	6a e9       	ldi	r22, 0x9A	; 154
 4ce:	71 e0       	ldi	r23, 0x01	; 1
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	0e 94 08 02 	call	0x410	; 0x410 <LCD_createChar>
	
	LCD_showMenu();
 4d6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_showMenu>
 4da:	08 95       	ret

000004dc <LCD_setInfo>:
	for (uint8_t i = 0; i < 8; i++, adr++) {
		LCD_sendData(ms[i]);
	}
}

void LCD_setInfo(uint8_t room, enum LCD_infoChar infoChar, char* str) {
 4dc:	fa 01       	movw	r30, r20
	switch (infoChar) {
 4de:	61 30       	cpi	r22, 0x01	; 1
 4e0:	69 f0       	breq	.+26     	; 0x4fc <LCD_setInfo+0x20>
 4e2:	28 f0       	brcs	.+10     	; 0x4ee <LCD_setInfo+0x12>
 4e4:	62 30       	cpi	r22, 0x02	; 2
 4e6:	89 f0       	breq	.+34     	; 0x50a <LCD_setInfo+0x2e>
 4e8:	63 30       	cpi	r22, 0x03	; 3
 4ea:	b1 f0       	breq	.+44     	; 0x518 <LCD_setInfo+0x3c>
 4ec:	08 95       	ret
		case LOCK:
			LCD_sendString(str, 1, room, 0);
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	48 2f       	mov	r20, r24
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	cf 01       	movw	r24, r30
 4f6:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
			return;
 4fa:	08 95       	ret
		case DOOR:
			LCD_sendString(str, 1, room, 9);
 4fc:	29 e0       	ldi	r18, 0x09	; 9
 4fe:	48 2f       	mov	r20, r24
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	cf 01       	movw	r24, r30
 504:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
			return;
 508:	08 95       	ret
		case WINDOW:
			LCD_sendString(str, 1, room, 14);
 50a:	2e e0       	ldi	r18, 0x0E	; 14
 50c:	48 2f       	mov	r20, r24
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	cf 01       	movw	r24, r30
 512:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
			return;
 516:	08 95       	ret
		case MOTION:
			LCD_sendString(str, 1, room, 19);
 518:	23 e1       	ldi	r18, 0x13	; 19
 51a:	48 2f       	mov	r20, r24
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	cf 01       	movw	r24, r30
 520:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
 524:	08 95       	ret

00000526 <updateInfo>:
	else ADR_PORT &= ~(1 << ADR(1));
	if (adr & 0b100) ADR_PORT |= (1 << ADR(2));
	else ADR_PORT &= ~(1 << ADR(2));
}

void updateInfo() {
 526:	2f 92       	push	r2
 528:	3f 92       	push	r3
 52a:	4f 92       	push	r4
 52c:	5f 92       	push	r5
 52e:	6f 92       	push	r6
 530:	8f 92       	push	r8
 532:	9f 92       	push	r9
 534:	af 92       	push	r10
 536:	bf 92       	push	r11
 538:	cf 92       	push	r12
 53a:	df 92       	push	r13
 53c:	ef 92       	push	r14
 53e:	ff 92       	push	r15
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	c0 e0       	ldi	r28, 0x00	; 0
 54a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t roomStatus;
	char* str = " ";
	for (uint8_t i = 0; i < ROOMS_COUNT; i++) {
		roomStatus = checkRoom(i);
		LCD_setInfo(i, DOOR, (roomStatus & 1) ? "O" : "C");
 54c:	0f 2e       	mov	r0, r31
 54e:	f9 e2       	ldi	r31, 0x29	; 41
 550:	ef 2e       	mov	r14, r31
 552:	f1 e0       	ldi	r31, 0x01	; 1
 554:	ff 2e       	mov	r15, r31
 556:	f0 2d       	mov	r31, r0
		LCD_setInfo(i, WINDOW, (roomStatus & 2) ? "O" : "C");
		LCD_setInfo(i, MOTION, (roomStatus & 4) ? "Y" : "N");
 558:	0f 2e       	mov	r0, r31
 55a:	fd e2       	ldi	r31, 0x2D	; 45
 55c:	af 2e       	mov	r10, r31
 55e:	f1 e0       	ldi	r31, 0x01	; 1
 560:	bf 2e       	mov	r11, r31
 562:	f0 2d       	mov	r31, r0
 564:	0f 2e       	mov	r0, r31
 566:	ff e2       	ldi	r31, 0x2F	; 47
 568:	8f 2e       	mov	r8, r31
 56a:	f1 e0       	ldi	r31, 0x01	; 1
 56c:	9f 2e       	mov	r9, r31
 56e:	f0 2d       	mov	r31, r0
		
		if ((rooms[i].door.lock && (roomStatus & 1)) ||
			(rooms[i].window.lock && (roomStatus & 2)) ||
			(rooms[i].motionSensor.lock && (roomStatus & 4))) {
			str[0] = LCD_CHAR_ACCIDENT;
 570:	0f 2e       	mov	r0, r31
 572:	f8 e9       	ldi	r31, 0x98	; 152
 574:	cf 2e       	mov	r12, r31
 576:	f1 e0       	ldi	r31, 0x01	; 1
 578:	df 2e       	mov	r13, r31
 57a:	f0 2d       	mov	r31, r0
			LCD_setInfo(i, LOCK, str);
		} else {
			// LOCK - ON if all sensors are locked
			str[0] = (rooms[i].door.lock && rooms[i].window.lock && rooms[i].motionSensor.lock) ? LCD_CHAR_LOCK : LCD_CHAR_UNLOCK;
 57c:	01 e0       	ldi	r16, 0x01	; 1
 57e:	21 2c       	mov	r2, r1
 580:	6c 2e       	mov	r6, r28

void updateInfo() {
	uint8_t roomStatus;
	char* str = " ";
	for (uint8_t i = 0; i < ROOMS_COUNT; i++) {
		roomStatus = checkRoom(i);
 582:	8c 2f       	mov	r24, r28
 584:	0e 94 ff 00 	call	0x1fe	; 0x1fe <checkRoom>
 588:	18 2f       	mov	r17, r24
		LCD_setInfo(i, DOOR, (roomStatus & 1) ? "O" : "C");
 58a:	81 70       	andi	r24, 0x01	; 1
 58c:	58 2e       	mov	r5, r24
 58e:	10 fd       	sbrc	r17, 0
 590:	05 c0       	rjmp	.+10     	; 0x59c <updateInfo+0x76>
 592:	eb e2       	ldi	r30, 0x2B	; 43
 594:	f1 e0       	ldi	r31, 0x01	; 1
 596:	4e 2f       	mov	r20, r30
 598:	5f 2f       	mov	r21, r31
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <updateInfo+0x7a>
 59c:	4e 2d       	mov	r20, r14
 59e:	5f 2d       	mov	r21, r15
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	86 2d       	mov	r24, r6
 5a4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_setInfo>
		LCD_setInfo(i, WINDOW, (roomStatus & 2) ? "O" : "C");
 5a8:	f1 2f       	mov	r31, r17
 5aa:	f2 70       	andi	r31, 0x02	; 2
 5ac:	4f 2e       	mov	r4, r31
 5ae:	11 fd       	sbrc	r17, 1
 5b0:	05 c0       	rjmp	.+10     	; 0x5bc <updateInfo+0x96>
 5b2:	8b e2       	ldi	r24, 0x2B	; 43
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	48 2f       	mov	r20, r24
 5b8:	59 2f       	mov	r21, r25
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <updateInfo+0x9a>
 5bc:	4e 2d       	mov	r20, r14
 5be:	5f 2d       	mov	r21, r15
 5c0:	62 e0       	ldi	r22, 0x02	; 2
 5c2:	86 2d       	mov	r24, r6
 5c4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_setInfo>
		LCD_setInfo(i, MOTION, (roomStatus & 4) ? "Y" : "N");
 5c8:	91 2f       	mov	r25, r17
 5ca:	94 70       	andi	r25, 0x04	; 4
 5cc:	39 2e       	mov	r3, r25
 5ce:	12 fd       	sbrc	r17, 2
 5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <updateInfo+0xb2>
 5d2:	48 2d       	mov	r20, r8
 5d4:	59 2d       	mov	r21, r9
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <updateInfo+0xb6>
 5d8:	4a 2d       	mov	r20, r10
 5da:	5b 2d       	mov	r21, r11
 5dc:	63 e0       	ldi	r22, 0x03	; 3
 5de:	86 2d       	mov	r24, r6
 5e0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_setInfo>
		
		if ((rooms[i].door.lock && (roomStatus & 1)) ||
 5e4:	ce 01       	movw	r24, r28
 5e6:	fe 01       	movw	r30, r28
 5e8:	ee 0f       	add	r30, r30
 5ea:	ff 1f       	adc	r31, r31
 5ec:	ee 0f       	add	r30, r30
 5ee:	ff 1f       	adc	r31, r31
 5f0:	ec 0f       	add	r30, r28
 5f2:	fd 1f       	adc	r31, r29
 5f4:	ee 54       	subi	r30, 0x4E	; 78
 5f6:	fe 4f       	sbci	r31, 0xFE	; 254
 5f8:	30 81       	ld	r19, Z
 5fa:	23 2f       	mov	r18, r19
 5fc:	21 70       	andi	r18, 0x01	; 1
 5fe:	30 ff       	sbrs	r19, 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <updateInfo+0xe0>
 602:	51 10       	cpse	r5, r1
 604:	21 c0       	rjmp	.+66     	; 0x648 <updateInfo+0x122>
			(rooms[i].window.lock && (roomStatus & 2)) ||
 606:	fc 01       	movw	r30, r24
 608:	ee 0f       	add	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	ee 0f       	add	r30, r30
 60e:	ff 1f       	adc	r31, r31
 610:	e8 0f       	add	r30, r24
 612:	f9 1f       	adc	r31, r25
 614:	ed 54       	subi	r30, 0x4D	; 77
 616:	fe 4f       	sbci	r31, 0xFE	; 254
 618:	30 81       	ld	r19, Z
		roomStatus = checkRoom(i);
		LCD_setInfo(i, DOOR, (roomStatus & 1) ? "O" : "C");
		LCD_setInfo(i, WINDOW, (roomStatus & 2) ? "O" : "C");
		LCD_setInfo(i, MOTION, (roomStatus & 4) ? "Y" : "N");
		
		if ((rooms[i].door.lock && (roomStatus & 1)) ||
 61a:	43 2f       	mov	r20, r19
 61c:	41 70       	andi	r20, 0x01	; 1
 61e:	30 ff       	sbrs	r19, 0
 620:	02 c0       	rjmp	.+4      	; 0x626 <updateInfo+0x100>
			(rooms[i].window.lock && (roomStatus & 2)) ||
 622:	41 10       	cpse	r4, r1
 624:	11 c0       	rjmp	.+34     	; 0x648 <updateInfo+0x122>
			(rooms[i].motionSensor.lock && (roomStatus & 4))) {
 626:	fc 01       	movw	r30, r24
 628:	ee 0f       	add	r30, r30
 62a:	ff 1f       	adc	r31, r31
 62c:	ee 0f       	add	r30, r30
 62e:	ff 1f       	adc	r31, r31
 630:	8e 0f       	add	r24, r30
 632:	9f 1f       	adc	r25, r31
 634:	fc 01       	movw	r30, r24
 636:	ec 54       	subi	r30, 0x4C	; 76
 638:	fe 4f       	sbci	r31, 0xFE	; 254
 63a:	90 81       	ld	r25, Z
		LCD_setInfo(i, DOOR, (roomStatus & 1) ? "O" : "C");
		LCD_setInfo(i, WINDOW, (roomStatus & 2) ? "O" : "C");
		LCD_setInfo(i, MOTION, (roomStatus & 4) ? "Y" : "N");
		
		if ((rooms[i].door.lock && (roomStatus & 1)) ||
			(rooms[i].window.lock && (roomStatus & 2)) ||
 63c:	39 2f       	mov	r19, r25
 63e:	31 70       	andi	r19, 0x01	; 1
 640:	90 ff       	sbrs	r25, 0
 642:	0b c0       	rjmp	.+22     	; 0x65a <updateInfo+0x134>
			(rooms[i].motionSensor.lock && (roomStatus & 4))) {
 644:	33 20       	and	r3, r3
 646:	49 f0       	breq	.+18     	; 0x65a <updateInfo+0x134>
			str[0] = LCD_CHAR_ACCIDENT;
 648:	82 e0       	ldi	r24, 0x02	; 2
 64a:	f6 01       	movw	r30, r12
 64c:	80 83       	st	Z, r24
			LCD_setInfo(i, LOCK, str);
 64e:	a6 01       	movw	r20, r12
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	86 2d       	mov	r24, r6
 654:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_setInfo>
 658:	11 c0       	rjmp	.+34     	; 0x67c <updateInfo+0x156>
		} else {
			// LOCK - ON if all sensors are locked
			str[0] = (rooms[i].door.lock && rooms[i].window.lock && rooms[i].motionSensor.lock) ? LCD_CHAR_LOCK : LCD_CHAR_UNLOCK;
 65a:	22 23       	and	r18, r18
 65c:	29 f0       	breq	.+10     	; 0x668 <updateInfo+0x142>
 65e:	44 23       	and	r20, r20
 660:	29 f0       	breq	.+10     	; 0x66c <updateInfo+0x146>
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	83 27       	eor	r24, r19
 666:	03 c0       	rjmp	.+6      	; 0x66e <updateInfo+0x148>
 668:	80 2f       	mov	r24, r16
 66a:	01 c0       	rjmp	.+2      	; 0x66e <updateInfo+0x148>
 66c:	80 2f       	mov	r24, r16
 66e:	f6 01       	movw	r30, r12
 670:	80 83       	st	Z, r24
			LCD_setInfo(i, LOCK, str);
 672:	a6 01       	movw	r20, r12
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	86 2d       	mov	r24, r6
 678:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_setInfo>
 67c:	21 96       	adiw	r28, 0x01	; 1
}

void updateInfo() {
	uint8_t roomStatus;
	char* str = " ";
	for (uint8_t i = 0; i < ROOMS_COUNT; i++) {
 67e:	c4 30       	cpi	r28, 0x04	; 4
 680:	d1 05       	cpc	r29, r1
 682:	09 f0       	breq	.+2      	; 0x686 <updateInfo+0x160>
 684:	7d cf       	rjmp	.-262    	; 0x580 <updateInfo+0x5a>
			// LOCK - ON if all sensors are locked
			str[0] = (rooms[i].door.lock && rooms[i].window.lock && rooms[i].motionSensor.lock) ? LCD_CHAR_LOCK : LCD_CHAR_UNLOCK;
			LCD_setInfo(i, LOCK, str);
		}
	}
}
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	0f 91       	pop	r16
 68e:	ff 90       	pop	r15
 690:	ef 90       	pop	r14
 692:	df 90       	pop	r13
 694:	cf 90       	pop	r12
 696:	bf 90       	pop	r11
 698:	af 90       	pop	r10
 69a:	9f 90       	pop	r9
 69c:	8f 90       	pop	r8
 69e:	6f 90       	pop	r6
 6a0:	5f 90       	pop	r5
 6a2:	4f 90       	pop	r4
 6a4:	3f 90       	pop	r3
 6a6:	2f 90       	pop	r2
 6a8:	08 95       	ret

000006aa <main>:
	sei();
}

int main(void)
{
	portSetup();
 6aa:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <portSetup>
	timerSetup();
 6ae:	0e 94 e6 00 	call	0x1cc	; 0x1cc <timerSetup>
	initRooms(rooms);
 6b2:	82 eb       	ldi	r24, 0xB2	; 178
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 53 00 	call	0xa6	; 0xa6 <initRooms>
	LCD_init();
 6ba:	0e 94 21 02 	call	0x442	; 0x442 <LCD_init>
 6be:	20 e0       	ldi	r18, 0x00	; 0
 6c0:	30 e0       	ldi	r19, 0x00	; 0
	TIMSK0 |= (1 << TOIE0); // Overflow interrupt
	TCCR0B |= (1 << CS02); // F/256
}

void lockRoom(uint8_t room, uint8_t lock) {
	rooms[room].door.lock = lock;
 6c2:	c9 01       	movw	r24, r18
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	82 0f       	add	r24, r18
 6ce:	93 1f       	adc	r25, r19
 6d0:	fc 01       	movw	r30, r24
 6d2:	ee 54       	subi	r30, 0x4E	; 78
 6d4:	fe 4f       	sbci	r31, 0xFE	; 254
 6d6:	40 81       	ld	r20, Z
 6d8:	4e 7f       	andi	r20, 0xFE	; 254
 6da:	40 83       	st	Z, r20
	rooms[room].window.lock = lock;
 6dc:	fc 01       	movw	r30, r24
 6de:	ed 54       	subi	r30, 0x4D	; 77
 6e0:	fe 4f       	sbci	r31, 0xFE	; 254
 6e2:	40 81       	ld	r20, Z
 6e4:	4e 7f       	andi	r20, 0xFE	; 254
 6e6:	40 83       	st	Z, r20
	rooms[room].motionSensor.lock = lock;
 6e8:	fc 01       	movw	r30, r24
 6ea:	ec 54       	subi	r30, 0x4C	; 76
 6ec:	fe 4f       	sbci	r31, 0xFE	; 254
 6ee:	80 81       	ld	r24, Z
 6f0:	8e 7f       	andi	r24, 0xFE	; 254
 6f2:	80 83       	st	Z, r24
 6f4:	2f 5f       	subi	r18, 0xFF	; 255
 6f6:	3f 4f       	sbci	r19, 0xFF	; 255
	portSetup();
	timerSetup();
	initRooms(rooms);
	LCD_init();

	for (uint8_t i = 0; i < ROOMS_COUNT; i++) lockRoom(i, 0); // UNLOCK rooms
 6f8:	24 30       	cpi	r18, 0x04	; 4
 6fa:	31 05       	cpc	r19, r1
 6fc:	11 f7       	brne	.-60     	; 0x6c2 <main+0x18>

    while (1) {
		cli();
 6fe:	f8 94       	cli
		updateInfo();
 700:	0e 94 93 02 	call	0x526	; 0x526 <updateInfo>
		sei();
 704:	78 94       	sei
 706:	fb cf       	rjmp	.-10     	; 0x6fe <main+0x54>

00000708 <KEY_readPad>:
		case MOTION:
			LCD_sendString(str, 1, room, 19);
	};
}

char KEY_readPad() {
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
	char res = '\0';
	KEY_PORT |= (1 << KEY_COLUMN(0)) | (1 << KEY_COLUMN(1)) | (1 << KEY_COLUMN(2));
 70c:	8b b1       	in	r24, 0x0b	; 11
 70e:	80 67       	ori	r24, 0x70	; 112
 710:	8b b9       	out	0x0b, r24	; 11
 712:	e4 e0       	ldi	r30, 0x04	; 4
 714:	f0 e0       	ldi	r31, 0x00	; 0
	for (uint8_t i = 0; i < 3; i++) {
 716:	60 e0       	ldi	r22, 0x00	; 0
			LCD_sendString(str, 1, room, 19);
	};
}

char KEY_readPad() {
	char res = '\0';
 718:	80 e0       	ldi	r24, 0x00	; 0
	KEY_PORT |= (1 << KEY_COLUMN(0)) | (1 << KEY_COLUMN(1)) | (1 << KEY_COLUMN(2));
	for (uint8_t i = 0; i < 3; i++) {
		KEY_PORT &= ~(1 << KEY_COLUMN(i));
 71a:	a1 e0       	ldi	r26, 0x01	; 1
 71c:	b0 e0       	ldi	r27, 0x00	; 0
 71e:	2b b1       	in	r18, 0x0b	; 11
 720:	ed 01       	movw	r28, r26
 722:	0e 2e       	mov	r0, r30
 724:	02 c0       	rjmp	.+4      	; 0x72a <KEY_readPad+0x22>
 726:	cc 0f       	add	r28, r28
 728:	dd 1f       	adc	r29, r29
 72a:	0a 94       	dec	r0
 72c:	e2 f7       	brpl	.-8      	; 0x726 <KEY_readPad+0x1e>
 72e:	9c 2f       	mov	r25, r28
 730:	90 95       	com	r25
 732:	29 23       	and	r18, r25
 734:	2b b9       	out	0x0b, r18	; 11
 736:	91 e3       	ldi	r25, 0x31	; 49
 738:	96 0f       	add	r25, r22
 73a:	40 e0       	ldi	r20, 0x00	; 0
 73c:	50 e0       	ldi	r21, 0x00	; 0
		
		for (uint8_t j = 0; j < 4; j++) {
			if (KEY_PIN & (1 << KEY_ROW(j)))
 73e:	29 b1       	in	r18, 0x09	; 9
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	04 2e       	mov	r0, r20
 744:	02 c0       	rjmp	.+4      	; 0x74a <KEY_readPad+0x42>
 746:	35 95       	asr	r19
 748:	27 95       	ror	r18
 74a:	0a 94       	dec	r0
 74c:	e2 f7       	brpl	.-8      	; 0x746 <KEY_readPad+0x3e>
 74e:	20 fd       	sbrc	r18, 0
 750:	0b c0       	rjmp	.+22     	; 0x768 <KEY_readPad+0x60>
				continue;
			if (j == 3) {
 752:	43 30       	cpi	r20, 0x03	; 3
 754:	41 f4       	brne	.+16     	; 0x766 <KEY_readPad+0x5e>
				switch (i) {
 756:	61 30       	cpi	r22, 0x01	; 1
 758:	21 f0       	breq	.+8      	; 0x762 <KEY_readPad+0x5a>
 75a:	a0 f0       	brcs	.+40     	; 0x784 <KEY_readPad+0x7c>
 75c:	62 30       	cpi	r22, 0x02	; 2
 75e:	a1 f0       	breq	.+40     	; 0x788 <KEY_readPad+0x80>
 760:	03 c0       	rjmp	.+6      	; 0x768 <KEY_readPad+0x60>
					case 0: res = '*'; break;
					case 1: res = '0'; break;
 762:	80 e3       	ldi	r24, 0x30	; 48
 764:	07 c0       	rjmp	.+14     	; 0x774 <KEY_readPad+0x6c>
					case 2: res = '#'; break;
				}
			} else {
				res = j * 3 + i + 1 + '0';
 766:	89 2f       	mov	r24, r25
 768:	4f 5f       	subi	r20, 0xFF	; 255
 76a:	5f 4f       	sbci	r21, 0xFF	; 255
 76c:	9d 5f       	subi	r25, 0xFD	; 253
	char res = '\0';
	KEY_PORT |= (1 << KEY_COLUMN(0)) | (1 << KEY_COLUMN(1)) | (1 << KEY_COLUMN(2));
	for (uint8_t i = 0; i < 3; i++) {
		KEY_PORT &= ~(1 << KEY_COLUMN(i));
		
		for (uint8_t j = 0; j < 4; j++) {
 76e:	44 30       	cpi	r20, 0x04	; 4
 770:	51 05       	cpc	r21, r1
 772:	29 f7       	brne	.-54     	; 0x73e <KEY_readPad+0x36>
			} else {
				res = j * 3 + i + 1 + '0';
			}
		}
		
		KEY_PORT |= (1 << KEY_COLUMN(i));
 774:	9b b1       	in	r25, 0x0b	; 11
 776:	9c 2b       	or	r25, r28
 778:	9b b9       	out	0x0b, r25	; 11
}

char KEY_readPad() {
	char res = '\0';
	KEY_PORT |= (1 << KEY_COLUMN(0)) | (1 << KEY_COLUMN(1)) | (1 << KEY_COLUMN(2));
	for (uint8_t i = 0; i < 3; i++) {
 77a:	6f 5f       	subi	r22, 0xFF	; 255
 77c:	31 96       	adiw	r30, 0x01	; 1
 77e:	63 30       	cpi	r22, 0x03	; 3
 780:	71 f6       	brne	.-100    	; 0x71e <KEY_readPad+0x16>
 782:	04 c0       	rjmp	.+8      	; 0x78c <KEY_readPad+0x84>
		for (uint8_t j = 0; j < 4; j++) {
			if (KEY_PIN & (1 << KEY_ROW(j)))
				continue;
			if (j == 3) {
				switch (i) {
					case 0: res = '*'; break;
 784:	8a e2       	ldi	r24, 0x2A	; 42
 786:	f6 cf       	rjmp	.-20     	; 0x774 <KEY_readPad+0x6c>
					case 1: res = '0'; break;
					case 2: res = '#'; break;
 788:	83 e2       	ldi	r24, 0x23	; 35
 78a:	f4 cf       	rjmp	.-24     	; 0x774 <KEY_readPad+0x6c>
		}
		
		KEY_PORT |= (1 << KEY_COLUMN(i));
	}
	return res;
}
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	08 95       	ret

00000792 <__vector_16>:
#include <avr/interrupt.h>
#include <util/delay.h>

#include "globals.h"

ISR(TIMER0_OVF_vect) {
 792:	1f 92       	push	r1
 794:	0f 92       	push	r0
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	0f 92       	push	r0
 79a:	11 24       	eor	r1, r1
 79c:	6f 92       	push	r6
 79e:	7f 92       	push	r7
 7a0:	8f 92       	push	r8
 7a2:	9f 92       	push	r9
 7a4:	af 92       	push	r10
 7a6:	bf 92       	push	r11
 7a8:	cf 92       	push	r12
 7aa:	df 92       	push	r13
 7ac:	ef 92       	push	r14
 7ae:	ff 92       	push	r15
 7b0:	0f 93       	push	r16
 7b2:	1f 93       	push	r17
 7b4:	2f 93       	push	r18
 7b6:	3f 93       	push	r19
 7b8:	4f 93       	push	r20
 7ba:	5f 93       	push	r21
 7bc:	6f 93       	push	r22
 7be:	7f 93       	push	r23
 7c0:	8f 93       	push	r24
 7c2:	9f 93       	push	r25
 7c4:	af 93       	push	r26
 7c6:	bf 93       	push	r27
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	ef 93       	push	r30
 7ce:	ff 93       	push	r31
	cli();
 7d0:	f8 94       	cli
	char key = KEY_readPad();
 7d2:	0e 94 84 03 	call	0x708	; 0x708 <KEY_readPad>
	if (key == '*') {
 7d6:	8a 32       	cpi	r24, 0x2A	; 42
 7d8:	09 f0       	breq	.+2      	; 0x7dc <__vector_16+0x4a>
 7da:	17 c1       	rjmp	.+558    	; 0xa0a <__stack+0x10b>
		LCD_clear();
 7dc:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_clear>
		LCD_sendString("-Setup mode-", 12, 0, 4);
 7e0:	24 e0       	ldi	r18, 0x04	; 4
 7e2:	40 e0       	ldi	r20, 0x00	; 0
 7e4:	6c e0       	ldi	r22, 0x0C	; 12
 7e6:	85 e4       	ldi	r24, 0x45	; 69
 7e8:	91 e0       	ldi	r25, 0x01	; 1
 7ea:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
		LCD_sendString("Choose a room: ", 15, 1, 0);
 7ee:	20 e0       	ldi	r18, 0x00	; 0
 7f0:	41 e0       	ldi	r20, 0x01	; 1
 7f2:	6f e0       	ldi	r22, 0x0F	; 15
 7f4:	82 e5       	ldi	r24, 0x52	; 82
 7f6:	91 e0       	ldi	r25, 0x01	; 1
 7f8:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
		int room = -1;
		uint8_t passSymbCount = 0;
		char* pass = "";
		char* str = "";
		while (1) {
			key = KEY_readPad();
 7fc:	0e 94 84 03 	call	0x708	; 0x708 <KEY_readPad>
			if (key == '\0')
 800:	88 23       	and	r24, r24
 802:	e1 f3       	breq	.-8      	; 0x7fc <__vector_16+0x6a>
				continue;
			if (key == '#') { // exit
 804:	83 32       	cpi	r24, 0x23	; 35
 806:	31 f0       	breq	.+12     	; 0x814 <__vector_16+0x82>
				LCD_showMenu();
				return;
			}
			
			for (uint8_t i = 0; i < ROOMS_COUNT; i++) {
				if (key == i + 1 + '0') {
 808:	28 2f       	mov	r18, r24
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	21 33       	cpi	r18, 0x31	; 49
 80e:	31 05       	cpc	r19, r1
 810:	31 f4       	brne	.+12     	; 0x81e <__vector_16+0x8c>
 812:	17 c0       	rjmp	.+46     	; 0x842 <__vector_16+0xb0>
		while (1) {
			key = KEY_readPad();
			if (key == '\0')
				continue;
			if (key == '#') { // exit
				LCD_clear();
 814:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_clear>
				LCD_showMenu();
 818:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_showMenu>
				return;
 81c:	f7 c0       	rjmp	.+494    	; 0xa0c <__stack+0x10d>
			}
			
			for (uint8_t i = 0; i < ROOMS_COUNT; i++) {
				if (key == i + 1 + '0') {
 81e:	22 33       	cpi	r18, 0x32	; 50
 820:	31 05       	cpc	r19, r1
 822:	49 f0       	breq	.+18     	; 0x836 <__vector_16+0xa4>
 824:	23 33       	cpi	r18, 0x33	; 51
 826:	31 05       	cpc	r19, r1
 828:	49 f0       	breq	.+18     	; 0x83c <__vector_16+0xaa>
 82a:	24 33       	cpi	r18, 0x34	; 52
 82c:	31 05       	cpc	r19, r1
 82e:	31 f7       	brne	.-52     	; 0x7fc <__vector_16+0x6a>
 830:	03 e0       	ldi	r16, 0x03	; 3
 832:	10 e0       	ldi	r17, 0x00	; 0
 834:	08 c0       	rjmp	.+16     	; 0x846 <__vector_16+0xb4>
 836:	01 e0       	ldi	r16, 0x01	; 1
 838:	10 e0       	ldi	r17, 0x00	; 0
 83a:	05 c0       	rjmp	.+10     	; 0x846 <__vector_16+0xb4>
 83c:	02 e0       	ldi	r16, 0x02	; 2
 83e:	10 e0       	ldi	r17, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <__vector_16+0xb4>
 842:	00 e0       	ldi	r16, 0x00	; 0
 844:	10 e0       	ldi	r17, 0x00	; 0
					room = i;
					str[0] = key;
 846:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <__data_start+0x99>
					LCD_sendString(str, 1, 1, 15);
 84a:	2f e0       	ldi	r18, 0x0F	; 15
 84c:	41 e0       	ldi	r20, 0x01	; 1
 84e:	61 e0       	ldi	r22, 0x01	; 1
 850:	89 e9       	ldi	r24, 0x99	; 153
 852:	91 e0       	ldi	r25, 0x01	; 1
 854:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
					LCD_sendString("Password: ", 10, 2, 0);
 858:	20 e0       	ldi	r18, 0x00	; 0
 85a:	42 e0       	ldi	r20, 0x02	; 2
 85c:	6a e0       	ldi	r22, 0x0A	; 10
 85e:	82 e6       	ldi	r24, 0x62	; 98
 860:	91 e0       	ldi	r25, 0x01	; 1
 862:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
 866:	2f e9       	ldi	r18, 0x9F	; 159
 868:	86 e8       	ldi	r24, 0x86	; 134
 86a:	91 e0       	ldi	r25, 0x01	; 1
 86c:	21 50       	subi	r18, 0x01	; 1
 86e:	80 40       	sbci	r24, 0x00	; 0
 870:	90 40       	sbci	r25, 0x00	; 0
 872:	e1 f7       	brne	.-8      	; 0x86c <__vector_16+0xda>
 874:	00 c0       	rjmp	.+0      	; 0x876 <__vector_16+0xe4>
 876:	00 00       	nop
 878:	0f 2e       	mov	r0, r31
 87a:	f9 e9       	ldi	r31, 0x99	; 153
 87c:	ef 2e       	mov	r14, r31
 87e:	f1 e0       	ldi	r31, 0x01	; 1
 880:	ff 2e       	mov	r15, r31
 882:	f0 2d       	mov	r31, r0
	if (key == '*') {
		LCD_clear();
		LCD_sendString("-Setup mode-", 12, 0, 4);
		LCD_sendString("Choose a room: ", 15, 1, 0);
		int room = -1;
		uint8_t passSymbCount = 0;
 884:	c0 e0       	ldi	r28, 0x00	; 0
 886:	01 c0       	rjmp	.+2      	; 0x88a <__vector_16+0xf8>
					_delay_ms(500);
					while (passSymbCount < 4) {
						key = KEY_readPad();
						if (key < '0' || key > '9')
							continue;
						pass[passSymbCount++] = key;
 888:	cd 2f       	mov	r28, r29
					str[0] = key;
					LCD_sendString(str, 1, 1, 15);
					LCD_sendString("Password: ", 10, 2, 0);
					_delay_ms(500);
					while (passSymbCount < 4) {
						key = KEY_readPad();
 88a:	0e 94 84 03 	call	0x708	; 0x708 <KEY_readPad>
						if (key < '0' || key > '9')
 88e:	90 ed       	ldi	r25, 0xD0	; 208
 890:	98 0f       	add	r25, r24
 892:	9a 30       	cpi	r25, 0x0A	; 10
 894:	c8 f4       	brcc	.+50     	; 0x8c8 <__vector_16+0x136>
							continue;
						pass[passSymbCount++] = key;
 896:	d1 e0       	ldi	r29, 0x01	; 1
 898:	dc 0f       	add	r29, r28
 89a:	f7 01       	movw	r30, r14
 89c:	81 93       	st	Z+, r24
 89e:	7f 01       	movw	r14, r30
						LCD_sendString("*", 1, 2, 9 + passSymbCount);
 8a0:	2a e0       	ldi	r18, 0x0A	; 10
 8a2:	2c 0f       	add	r18, r28
 8a4:	42 e0       	ldi	r20, 0x02	; 2
 8a6:	61 e0       	ldi	r22, 0x01	; 1
 8a8:	8d e6       	ldi	r24, 0x6D	; 109
 8aa:	91 e0       	ldi	r25, 0x01	; 1
 8ac:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
 8b0:	ff e9       	ldi	r31, 0x9F	; 159
 8b2:	26 e8       	ldi	r18, 0x86	; 134
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	f1 50       	subi	r31, 0x01	; 1
 8b8:	20 40       	sbci	r18, 0x00	; 0
 8ba:	80 40       	sbci	r24, 0x00	; 0
 8bc:	e1 f7       	brne	.-8      	; 0x8b6 <__vector_16+0x124>
 8be:	00 c0       	rjmp	.+0      	; 0x8c0 <__vector_16+0x12e>
 8c0:	00 00       	nop
					room = i;
					str[0] = key;
					LCD_sendString(str, 1, 1, 15);
					LCD_sendString("Password: ", 10, 2, 0);
					_delay_ms(500);
					while (passSymbCount < 4) {
 8c2:	d4 30       	cpi	r29, 0x04	; 4
 8c4:	09 f7       	brne	.-62     	; 0x888 <__vector_16+0xf6>
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__vector_16+0x13a>
 8c8:	c4 30       	cpi	r28, 0x04	; 4
 8ca:	f8 f2       	brcs	.-66     	; 0x88a <__vector_16+0xf8>
							continue;
						pass[passSymbCount++] = key;
						LCD_sendString("*", 1, 2, 9 + passSymbCount);
						_delay_ms(500);
					}
					if (!cmpString(pass, rooms[room].pass, 4)) { //incorrect pass
 8cc:	f8 01       	movw	r30, r16
 8ce:	ee 0f       	add	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	ee 0f       	add	r30, r30
 8d4:	ff 1f       	adc	r31, r31
 8d6:	e0 0f       	add	r30, r16
 8d8:	f1 1f       	adc	r31, r17
 8da:	ee 54       	subi	r30, 0x4E	; 78
 8dc:	fe 4f       	sbci	r31, 0xFE	; 254
 8de:	63 81       	ldd	r22, Z+3	; 0x03
 8e0:	74 81       	ldd	r23, Z+4	; 0x04
 8e2:	44 e0       	ldi	r20, 0x04	; 4
 8e4:	89 e9       	ldi	r24, 0x99	; 153
 8e6:	91 e0       	ldi	r25, 0x01	; 1
 8e8:	0e 94 ae 00 	call	0x15c	; 0x15c <cmpString>
 8ec:	81 11       	cpse	r24, r1
 8ee:	15 c0       	rjmp	.+42     	; 0x91a <__stack+0x1b>
						LCD_sendString(" Incorrect password ", 20, 3, 0);
 8f0:	20 e0       	ldi	r18, 0x00	; 0
 8f2:	43 e0       	ldi	r20, 0x03	; 3
 8f4:	64 e1       	ldi	r22, 0x14	; 20
 8f6:	8f e6       	ldi	r24, 0x6F	; 111
 8f8:	91 e0       	ldi	r25, 0x01	; 1
 8fa:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
 8fe:	9f e7       	ldi	r25, 0x7F	; 127
 900:	ea e1       	ldi	r30, 0x1A	; 26
 902:	f6 e0       	ldi	r31, 0x06	; 6
 904:	91 50       	subi	r25, 0x01	; 1
 906:	e0 40       	sbci	r30, 0x00	; 0
 908:	f0 40       	sbci	r31, 0x00	; 0
 90a:	e1 f7       	brne	.-8      	; 0x904 <__stack+0x5>
 90c:	00 c0       	rjmp	.+0      	; 0x90e <__stack+0xf>
 90e:	00 00       	nop
						_delay_ms(2000);
						LCD_clear();
 910:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_clear>
						LCD_showMenu();
 914:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_showMenu>
						return;
 918:	79 c0       	rjmp	.+242    	; 0xa0c <__stack+0x10d>
					}
					LCD_sendString("Status:              ", 20, 3, 0);
 91a:	20 e0       	ldi	r18, 0x00	; 0
 91c:	43 e0       	ldi	r20, 0x03	; 3
 91e:	64 e1       	ldi	r22, 0x14	; 20
 920:	84 e8       	ldi	r24, 0x84	; 132
 922:	91 e0       	ldi	r25, 0x01	; 1
 924:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
					char* locked = "LOCKED   ";
					locked[9] = LCD_CHAR_LOCK;
 928:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_start+0x3a>
					char* unlocked = "UNLOCKED ";
					unlocked[9] = LCD_CHAR_UNLOCK;
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_start+0x44>
	rooms[room].window.lock = lock;
	rooms[room].motionSensor.lock = lock;
}

uint8_t isRoomLocked(uint8_t room) {
	return rooms[room].door.lock;
 932:	f8 01       	movw	r30, r16
 934:	ee 0f       	add	r30, r30
 936:	ff 1f       	adc	r31, r31
 938:	ee 0f       	add	r30, r30
 93a:	ff 1f       	adc	r31, r31
 93c:	e0 0f       	add	r30, r16
 93e:	f1 1f       	adc	r31, r17
 940:	ee 54       	subi	r30, 0x4E	; 78
 942:	fe 4f       	sbci	r31, 0xFE	; 254
 944:	80 81       	ld	r24, Z
					char* locked = "LOCKED   ";
					locked[9] = LCD_CHAR_LOCK;
					char* unlocked = "UNLOCKED ";
					unlocked[9] = LCD_CHAR_UNLOCK;
					uint8_t status = isRoomLocked(room);
					LCD_sendString(status ? locked : unlocked, 10, 3, 8);
 946:	80 fb       	bst	r24, 0
 948:	99 24       	eor	r9, r9
 94a:	90 f8       	bld	r9, 0
 94c:	80 fd       	sbrc	r24, 0
 94e:	03 c0       	rjmp	.+6      	; 0x956 <__stack+0x57>
 950:	8b e3       	ldi	r24, 0x3B	; 59
 952:	91 e0       	ldi	r25, 0x01	; 1
 954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0x5b>
 956:	81 e3       	ldi	r24, 0x31	; 49
 958:	91 e0       	ldi	r25, 0x01	; 1
 95a:	28 e0       	ldi	r18, 0x08	; 8
 95c:	43 e0       	ldi	r20, 0x03	; 3
 95e:	6a e0       	ldi	r22, 0x0A	; 10
 960:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
							LCD_clear();
							LCD_showMenu();
							return;
						}
						if (key == '*') {
							status = !status;
 964:	88 24       	eor	r8, r8
 966:	83 94       	inc	r8
	TIMSK0 |= (1 << TOIE0); // Overflow interrupt
	TCCR0B |= (1 << CS02); // F/256
}

void lockRoom(uint8_t room, uint8_t lock) {
	rooms[room].door.lock = lock;
 968:	c8 01       	movw	r24, r16
 96a:	88 0f       	add	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	88 0f       	add	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	08 0f       	add	r16, r24
 974:	19 1f       	adc	r17, r25
 976:	c8 01       	movw	r24, r16
 978:	8e 54       	subi	r24, 0x4E	; 78
 97a:	9e 4f       	sbci	r25, 0xFE	; 254
 97c:	6c 01       	movw	r12, r24
	rooms[room].window.lock = lock;
 97e:	f8 01       	movw	r30, r16
 980:	ed 54       	subi	r30, 0x4D	; 77
 982:	fe 4f       	sbci	r31, 0xFE	; 254
 984:	7f 01       	movw	r14, r30
	rooms[room].motionSensor.lock = lock;
 986:	e8 01       	movw	r28, r16
 988:	cc 54       	subi	r28, 0x4C	; 76
 98a:	de 4f       	sbci	r29, 0xFE	; 254
							return;
						}
						if (key == '*') {
							status = !status;
							lockRoom(room, status);
							LCD_sendString(status ? locked : unlocked, 10, 3, 8);
 98c:	0f 2e       	mov	r0, r31
 98e:	f1 e3       	ldi	r31, 0x31	; 49
 990:	af 2e       	mov	r10, r31
 992:	f1 e0       	ldi	r31, 0x01	; 1
 994:	bf 2e       	mov	r11, r31
 996:	f0 2d       	mov	r31, r0
 998:	0b e3       	ldi	r16, 0x3B	; 59
 99a:	11 e0       	ldi	r17, 0x01	; 1
							LCD_clear();
							LCD_showMenu();
							return;
						}
						if (key == '*') {
							status = !status;
 99c:	71 2c       	mov	r7, r1
					char* unlocked = "UNLOCKED ";
					unlocked[9] = LCD_CHAR_UNLOCK;
					uint8_t status = isRoomLocked(room);
					LCD_sendString(status ? locked : unlocked, 10, 3, 8);
					while (1) {
						key = KEY_readPad();
 99e:	0e 94 84 03 	call	0x708	; 0x708 <KEY_readPad>
						if (key == '\0')
 9a2:	88 23       	and	r24, r24
 9a4:	e1 f3       	breq	.-8      	; 0x99e <__stack+0x9f>
							continue;
						if (key == '#') {// exit
 9a6:	83 32       	cpi	r24, 0x23	; 35
 9a8:	29 f4       	brne	.+10     	; 0x9b4 <__stack+0xb5>
							LCD_clear();
 9aa:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_clear>
							LCD_showMenu();
 9ae:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_showMenu>
							return;
 9b2:	2c c0       	rjmp	.+88     	; 0xa0c <__stack+0x10d>
						}
						if (key == '*') {
 9b4:	8a 32       	cpi	r24, 0x2A	; 42
 9b6:	99 f7       	brne	.-26     	; 0x99e <__stack+0x9f>
							status = !status;
 9b8:	88 2d       	mov	r24, r8
 9ba:	91 10       	cpse	r9, r1
 9bc:	87 2d       	mov	r24, r7
 9be:	68 2e       	mov	r6, r24
	TIMSK0 |= (1 << TOIE0); // Overflow interrupt
	TCCR0B |= (1 << CS02); // F/256
}

void lockRoom(uint8_t room, uint8_t lock) {
	rooms[room].door.lock = lock;
 9c0:	f6 01       	movw	r30, r12
 9c2:	90 81       	ld	r25, Z
 9c4:	80 fb       	bst	r24, 0
 9c6:	90 f9       	bld	r25, 0
 9c8:	90 83       	st	Z, r25
	rooms[room].window.lock = lock;
 9ca:	f7 01       	movw	r30, r14
 9cc:	90 81       	ld	r25, Z
 9ce:	80 fb       	bst	r24, 0
 9d0:	90 f9       	bld	r25, 0
 9d2:	90 83       	st	Z, r25
	rooms[room].motionSensor.lock = lock;
 9d4:	98 81       	ld	r25, Y
 9d6:	80 fb       	bst	r24, 0
 9d8:	90 f9       	bld	r25, 0
 9da:	98 83       	st	Y, r25
							return;
						}
						if (key == '*') {
							status = !status;
							lockRoom(room, status);
							LCD_sendString(status ? locked : unlocked, 10, 3, 8);
 9dc:	99 20       	and	r9, r9
 9de:	19 f0       	breq	.+6      	; 0x9e6 <__stack+0xe7>
 9e0:	80 2f       	mov	r24, r16
 9e2:	91 2f       	mov	r25, r17
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <__stack+0xeb>
 9e6:	8a 2d       	mov	r24, r10
 9e8:	9b 2d       	mov	r25, r11
 9ea:	28 e0       	ldi	r18, 0x08	; 8
 9ec:	43 e0       	ldi	r20, 0x03	; 3
 9ee:	6a e0       	ldi	r22, 0x0A	; 10
 9f0:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_sendString>
 9f4:	ff e5       	ldi	r31, 0x5F	; 95
 9f6:	2a ee       	ldi	r18, 0xEA	; 234
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	f1 50       	subi	r31, 0x01	; 1
 9fc:	20 40       	sbci	r18, 0x00	; 0
 9fe:	80 40       	sbci	r24, 0x00	; 0
 a00:	e1 f7       	brne	.-8      	; 0x9fa <__stack+0xfb>
 a02:	00 c0       	rjmp	.+0      	; 0xa04 <__stack+0x105>
 a04:	00 00       	nop
							LCD_clear();
							LCD_showMenu();
							return;
						}
						if (key == '*') {
							status = !status;
 a06:	96 2c       	mov	r9, r6
 a08:	ca cf       	rjmp	.-108    	; 0x99e <__stack+0x9f>
					}
				}
			}
		}
	}
	sei();
 a0a:	78 94       	sei
}
 a0c:	ff 91       	pop	r31
 a0e:	ef 91       	pop	r30
 a10:	df 91       	pop	r29
 a12:	cf 91       	pop	r28
 a14:	bf 91       	pop	r27
 a16:	af 91       	pop	r26
 a18:	9f 91       	pop	r25
 a1a:	8f 91       	pop	r24
 a1c:	7f 91       	pop	r23
 a1e:	6f 91       	pop	r22
 a20:	5f 91       	pop	r21
 a22:	4f 91       	pop	r20
 a24:	3f 91       	pop	r19
 a26:	2f 91       	pop	r18
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	ff 90       	pop	r15
 a2e:	ef 90       	pop	r14
 a30:	df 90       	pop	r13
 a32:	cf 90       	pop	r12
 a34:	bf 90       	pop	r11
 a36:	af 90       	pop	r10
 a38:	9f 90       	pop	r9
 a3a:	8f 90       	pop	r8
 a3c:	7f 90       	pop	r7
 a3e:	6f 90       	pop	r6
 a40:	0f 90       	pop	r0
 a42:	0f be       	out	0x3f, r0	; 63
 a44:	0f 90       	pop	r0
 a46:	1f 90       	pop	r1
 a48:	18 95       	reti

00000a4a <_exit>:
 a4a:	f8 94       	cli

00000a4c <__stop_program>:
 a4c:	ff cf       	rjmp	.-2      	; 0xa4c <__stop_program>
